name: store_ccache

on:
  push:
    branch-ignore:
      - '*'
    tags:
      - 'ccache'

env:
  PV_TAG: v5.10.1-headless
  PV_REPO: topology-tool-kit/ttk-paraview

jobs:

  # -------#
  # Ubuntu #
  # -------#
  ccache-ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, ubuntu-22.04]
    env:
      CCACHE_DIR: /home/runner/.ccache

    steps:
    - uses: actions/checkout@v3
      name: Checkout TTK source code

    - name: Install Ubuntu dependencies
      run: |
        sudo apt update
        # TTK dependencies
        sudo apt install -y \
          ccache \
          libboost-system-dev \
          libeigen3-dev \
          libgraphviz-dev \
          libosmesa-dev \
          libopenmpi-dev \
          libsqlite3-dev \
          libwebsocketpp-dev \
          graphviz \
          ninja-build \
          zlib1g-dev \
          dpkg-dev
        sudo python3 -m pip install scikit-learn

    - name: Install optional dependencies
      uses: ./.github/actions/install-deps-unix

    - name: Fetch TTK-ParaView headless Debian package
      run: |
        wget -O ttk-paraview-headless.deb \
          https://github.com/${{ env.PV_REPO }}/releases/download/${{ env.PV_TAG }}/ttk-paraview-headless-${{ matrix.os }}.deb

    - name: Install ParaView .deb
      run: |
        sudo apt install ./ttk-paraview-headless.deb

    - name: Create & configure TTK build directory
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DTTK_BUILD_PARAVIEW_PLUGINS=TRUE \
          -DTTK_BUILD_VTK_WRAPPERS=TRUE \
          -DTTK_BUILD_STANDALONE_APPS=TRUE \
          -DTTK_ENABLE_KAMIKAZE=TRUE \
          -DTTK_ENABLE_MPI=TRUE \
          -DTTK_ENABLE_CPU_OPTIMIZATION=FALSE \
          -DTTK_ENABLE_SHARED_BASE_LIBRARIES=TRUE \
          -DTTK_IMPLICIT_PRECONDITIONS_THRESHOLD=64*64*64 \
          -GNinja \
          $GITHUB_WORKSPACE

    - name: Build TTK
      run: |
        cd build
        cmake --build . --parallel

    - name: Archive cache
      run: |
        cd /home/runner
        tar czf ttk-ccache.tar.gz .ccache

    - name: Upload ccache archive
      uses: actions/upload-artifact@v3
      with:
        name: ttk-ccache-${{ matrix.os }}
        path: /home/runner/ttk-ccache.tar.gz


  # ------#
  # macOS #
  # ------#
  ccache-macos:
    runs-on: macos-latest
    env:
      CCACHE_DIR: /Users/runner/work/ttk/.ccache
    steps:
    - uses: actions/checkout@v3
      name: Checkout TTK source code

    - name: Install macOS dependencies
      run: |
        # ParaView dependencies
        brew install --cask xquartz
        brew install wget llvm libomp ninja python open-mpi
        # TTK dependencies
        brew install boost eigen graphviz numpy embree websocketpp ccache
        python3.10 -m pip install scikit-learn
        # prepend ccache to system path
        echo "$(brew --prefix)/opt/ccache/libexec" >> $GITHUB_PATH
        # remove Python 3.11 installation
        sudo rm -rf /Library/Frameworks/Python.framework/Versions/3.11

    - name: Install optional dependencies
      uses: ./.github/actions/install-deps-unix

    - name: Fetch TTK-ParaView headless macOS binary archive
      run: |
        wget https://github.com/${{ env.PV_REPO }}/releases/download/${{ env.PV_TAG }}/ttk-paraview-headless.tar.gz

    - name: Install ParaView
      run: |
        tar xzf ttk-paraview-headless.tar.gz
        sudo cp -r ttk-paraview/* /usr/local

    - name: Set compilers as environment variables
      run: |
        echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
        echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV

    - name: Create & configure TTK build directory
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DTTK_BUILD_PARAVIEW_PLUGINS=TRUE \
          -DTTK_BUILD_VTK_WRAPPERS=TRUE \
          -DTTK_BUILD_STANDALONE_APPS=TRUE \
          -DTTK_ENABLE_KAMIKAZE=TRUE \
          -DTTK_ENABLE_MPI=TRUE \
          -DTTK_ENABLE_CPU_OPTIMIZATION=FALSE \
          -DTTK_ENABLE_SHARED_BASE_LIBRARIES=TRUE \
          -DTTK_IMPLICIT_PRECONDITIONS_THRESHOLD=64*64*64 \
          -GNinja \
          $GITHUB_WORKSPACE

    - name: Build TTK
      run: |
        cd build
        cmake --build . --parallel

    - name: Archive cache
      run: |
        cd /Users/runner/work/ttk
        tar czf ttk-ccache.tar.gz .ccache

    - name: Upload ccache archive
      uses: actions/upload-artifact@v3
      with:
        name: ttk-ccache-macOS
        path: /Users/runner/work/ttk/ttk-ccache.tar.gz

  # ------- #
  # Windows #
  # ------- #
  ccache-windows:
    runs-on: windows-latest
    env:
      CONDA_ROOT: C:\Miniconda
    steps:
    - uses: actions/checkout@v3
      name: Checkout TTK source code

    - uses: s-weigand/setup-conda@v1

    - name: Install dependencies with conda
      shell: bash
      run: |
        conda install -c conda-forge boost glew eigen spectralib zfp \
          scikit-learn openmp graphviz ninja websocketpp sccache
        # add sccache to PATH
        echo "$CONDA_ROOT/bin" >> $GITHUB_PATH

    - name: Remove hosted Python
      shell: bash
      run: |
        rm -rf C:/hostedtoolcache/windows/Python

    - name: Fetch TTK-ParaView headless Windows installer
      run: |
        Invoke-WebRequest `
        -OutFile ttk-paraview-headless.exe `
        -Uri https://github.com/${{ env.PV_REPO }}/releases/download/${{ env.PV_TAG }}/ttk-paraview-headless.exe

    - name: Install ParaView
      shell: cmd
      run: |
        ttk-paraview-headless.exe /S

    - name: Create & configure TTK build directory
      shell: cmd
      run: |
        set CMAKE_PREFIX_PATH=%CONDA_ROOT%\Library\lib\cmake;%CONDA_ROOT%\Library\share\eigen3\cmake;%CONDA_ROOT%\Library\cmake;%ProgramFiles%\TTK-ParaView\lib\cmake
        set CC=clang-cl.exe
        set CXX=clang-cl.exe
        call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        sccache --stop-server
        sccache --start-server
        mkdir build
        cd build
        cmake ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DCMAKE_POLICY_DEFAULT_CMP0092=NEW ^
          -DBUILD_SHARED_LIBS:BOOL=TRUE ^
          -DCMAKE_C_COMPILER_LAUNCHER=sccache ^
          -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
          -DPython3_ROOT_DIR="%CONDA_ROOT%" ^
          -DGraphviz_INCLUDE_DIR="%CONDA_ROOT%\Library\include\graphviz" ^
          -DGraphviz_CDT_LIBRARY="%CONDA_ROOT%\Library\lib\cdt.lib" ^
          -DGraphviz_GVC_LIBRARY="%CONDA_ROOT%\Library\lib\gvc.lib" ^
          -DGraphviz_CGRAPH_LIBRARY="%CONDA_ROOT%\Library\lib\cgraph.lib" ^
          -DGraphviz_PATHPLAN_LIBRARY="%CONDA_ROOT%\Library\lib\pathplan.lib" ^
          -DTTK_BUILD_PARAVIEW_PLUGINS=TRUE ^
          -DTTK_BUILD_VTK_WRAPPERS=TRUE ^
          -DTTK_BUILD_STANDALONE_APPS=TRUE ^
          -DTTK_ENABLE_KAMIKAZE=TRUE ^
          -DTTK_ENABLE_OPENMP=TRUE ^
          -DTTK_ENABLE_CPU_OPTIMIZATION=FALSE ^
          -DTTK_ENABLE_SHARED_BASE_LIBRARIES=TRUE ^
          -DTTK_IMPLICIT_PRECONDITIONS_THRESHOLD=64*64*64 ^
          -GNinja ^
          ..

    - name: Fix clang-cl OpenMP flags in build.ninja
      shell: bash
      run: |
        sed -i 's/-Xclang -fopenmp/-openmp/' build/build.ninja

    - name: Build & install TTK
      shell: cmd
      run: |
        cd build
        call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        cmake --build . --config Release --parallel --target install

    - name: Archive cache
      shell: bash
      run: |
        cd /c/Users/runneradmin/AppData/Local/Mozilla/sccache
        tar czf ttk-sccache.tar.gz cache

    - name: Upload sccache archive
      uses: actions/upload-artifact@v3
      with:
        name: ttk-sccache-windows
        path: C:\Users\runneradmin\AppData\Local\Mozilla\sccache\ttk-sccache.tar.gz


  # --------------------- #
  # Upload release assets #
  # --------------------- #
  create-release:
    runs-on: ubuntu-latest
    needs: [ccache-ubuntu, ccache-macos, ccache-windows]
    steps:

    - name: Delete previous release
      uses: actions/github-script@v6
      continue-on-error: true
      with:
        script: |
          const { owner, repo } = context.repo
          const { data: { id } } = await github.rest.repos.getReleaseByTag({
            owner,
            repo,
            tag: "ccache"
          })
          await github.rest.repos.deleteRelease({ owner, repo, release_id: id })

    - name: Create Release
      uses: actions/github-script@v6
      with:
        script: |
          const { owner, repo } = context.repo
          await github.rest.repos.createRelease({
            owner,
            repo,
            tag_name: "ccache",
            name: "ccache archives",
            body: "Holds ccache archives to speed up build jobs",
            draft: false,
            prerelease: true
          })

    - name: Fetch all uploaded artifacts
      uses: actions/download-artifact@v3

    - name: Upload Ubuntu Bionic .deb as Release Asset
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref }}
        file: ttk-ccache-ubuntu-18.04/ttk-ccache.tar.gz
        asset_name: ttk-ccache-ubuntu-18.04.tar.gz

    - name: Upload Ubuntu Focal .deb as Release Asset
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref }}
        file: ttk-ccache-ubuntu-20.04/ttk-ccache.tar.gz
        asset_name: ttk-ccache-ubuntu-20.04.tar.gz

    - name: Upload Ubuntu Jammy .deb as Release Asset
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref }}
        file: ttk-ccache-ubuntu-22.04/ttk-ccache.tar.gz
        asset_name: ttk-ccache-ubuntu-22.04.tar.gz

    - name: Upload .pkg as Release Asset
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref }}
        file: ttk-ccache-macOS/ttk-ccache.tar.gz
        asset_name: ttk-ccache-macOS.tar.gz

    - name: Upload sccache Windows archive
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.ref }}
        file: ttk-sccache-windows/ttk-sccache.tar.gz
        asset_name: ttk-sccache-windows.tar.gz

    - name: Delete ccache artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
          name: |
              ttk-*ccache*
