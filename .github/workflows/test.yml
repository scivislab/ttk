name: test_build

on:
  push:
    # triggered on tag pushes with tags beginning with either "v" or "dev"
    branch-ignore:
      - '*'
    tags:
      - 'v*'
      - 'dev*'
      - 'ci*'
      - 'build*'
      - 'test*'
  pull_request:
    # also triggered by pull requests on the "dev" & "mpi" branches
    branches:
      - 'dev'
      - 'mpi'

env:
  PV_TAG: v5.10.1-headless
  PV_REPO: topology-tool-kit/ttk-paraview


jobs:

  # ------------------#
  # Test Ubuntu build #
  # ------------------#
  test-build-ubuntu:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, ubuntu-22.04]
    steps:
    - uses: actions/checkout@v3
      name: Checkout TTK source code

    - name: Install Ubuntu dependencies
      run: |
        sudo apt update
        # TTK dependencies
        sudo apt install -y \
          ccache \
          libboost-system-dev \
          libeigen3-dev \
          libgraphviz-dev \
          libosmesa-dev \
          libopenmpi-dev \
          libsqlite3-dev \
          libwebsocketpp-dev \
          graphviz \
          ninja-build \
          zlib1g-dev \
          dpkg-dev
        sudo python3 -m pip install scikit-learn

    - name: Install optional dependencies
      uses: ./.github/actions/install-deps-unix

    - name: Fetch archived ccache
      continue-on-error: true
      run: |
        wget -O ttk-ccache.tar.gz \
          https://github.com/${{ github.repository }}/releases/download/ccache/ttk-ccache-${{ matrix.os }}.tar.gz

    - name: Decompress ccache archive
      continue-on-error: true
      run: |
        tar xzf ttk-ccache.tar.gz
        mv .ccache /home/runner/

    - name: Fetch TTK-ParaView headless Debian package
      run: |
        wget -O ttk-paraview-headless.deb \
          https://github.com/${{ env.PV_REPO }}/releases/download/${{ env.PV_TAG }}/ttk-paraview-headless-${{ matrix.os }}.deb

    - name: Install ParaView .deb
      run: |
        sudo apt install ./ttk-paraview-headless.deb

    - name: Create & configure TTK build directory
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DTTK_BUILD_PARAVIEW_PLUGINS=TRUE \
          -DTTK_BUILD_VTK_WRAPPERS=TRUE \
          -DTTK_BUILD_STANDALONE_APPS=TRUE \
          -DTTK_ENABLE_KAMIKAZE=TRUE \
          -DTTK_ENABLE_MPI=TRUE \
          -DTTK_ENABLE_CPU_OPTIMIZATION=FALSE \
          -DTTK_ENABLE_SHARED_BASE_LIBRARIES=TRUE \
          -DTTK_IMPLICIT_PRECONDITIONS_THRESHOLD=64*64*64 \
          -GNinja \
          $GITHUB_WORKSPACE

    - uses: ammaraskar/gcc-problem-matcher@master
    - name: Build & install TTK
      run: |
        cd build
        cmake --build . --parallel
        sudo cmake --build . --target install

    - name: Set PYTHONPATH for Ubuntu 22.04 pvpython
      if: matrix.os == 'ubuntu-22.04'
      run: |
        # pvpython does not embed the correct PYTHONPATH
        echo "PYTHONPATH=/usr/lib/python3/dist-packages:$PYTHONPATH" >> $GITHUB_ENV

    - name: Run TTK tests
      uses: ./.github/actions/test-ttk-unix

    - uses: actions/checkout@v3
      with:
        repository: "topology-tool-kit/ttk-data"
        ref: "dev"
        path: "ttk-data"
      name: Checkout ttk-data

    - name: Resample large datasets
      shell: python3 {0}
      working-directory: ./ttk-data
      run: |
        from paraview import simple
        for ds in ["ctBones.vti"]:
            vti = simple.XMLImageDataReader(FileName=ds)
            rsi = simple.ResampleToImage(Input=vti)
            rsi.SamplingDimensions = [128, 128, 128]
            simple.SaveData(ds, rsi)

    - name: Run ttk-data states [NOT ENFORCED]
      id: validate
      continue-on-error: true
      run: |
        VERS=$(hostnamectl | grep "Operating System")
        # Ubuntu 22.04 OOM killer also kills the parent process...
        if [[ "$VERS" == *"22.04"* ]]; then
          rm ttk-data/states/mergeTreeClustering.pvsm
          rm ttk-data/states/mergeTreeTemporalReduction.pvsm
        fi

        cd ttk-data/tests
        mkdir output_screenshots
        if ! python3 -u validate.py; then

          if [[ "$VERS" == *"18.04"* ]]; then
            # Ubuntu 18.04 has an old scikit-learn that messes with
            # KarhunenLove screenshots
            rm -f output_screenshots/karhunenLoveDigits64Dimensions_1.png
            rm -f output_screenshots/karhunenLoveDigits64Dimensions_2.png
            # Weird things with HarmonicSkeleton (old GCC version?)
            rm -f output_screenshots/harmonicSkeleton_0.png
            rm -f output_screenshots/harmonicSkeleton_1.png
          fi
          if [[ "$VERS" == *"22.04"* ]]; then
            # Ubuntu 22.04 performs more iterations in
            # PersistenceDiagramClustering than older Ubuntu VMs
            rm -f output_screenshots/persistenceDiagramClustering*.png
            # EigenField output not deterministic...
            rm -f output_screenshots/persistentGenerators_skull_1.png
          fi
          # ViscousFingering plot rendering issues
          rm -rf output_screenshots/viscousFingering_0.png
          # EigenField output not deterministic...
          rm -rf output_screenshots/persistentGenerators_fertility_1.png

          if [ "$(ls -A output_screenshots)" ]; then
            tar zcf screenshots.tar.gz output_screenshots
            false
          fi
        fi

    - name: Upload result screenshots
      if: steps.validate.outcome == 'failure'
      uses: actions/upload-artifact@v3
      with:
        name: screenshots-${{ matrix.os }}.tar.gz
        path: ttk-data/tests/screenshots.tar.gz
        retention-days: 10

    - name: Run ttk-data Python scripts
      run: |
        cd ttk-data
        python3 -u python/run.py

    - name: Test ttk-data Python scripts results [NOT ENFORCED]
      continue-on-error: true
      run: |
        cd ttk-data
        cat python/res.json
        diff python/hashes/${{ matrix.os }}.json python/res.json


  # -----------------#
  # Test macOS build #
  # -----------------#
  test-build-macos:
    runs-on: macos-12
    env:
      CCACHE_DIR: /Users/runner/work/ttk/.ccache
    steps:
    - uses: actions/checkout@v3
      name: Checkout TTK source code

    - name: Install macOS dependencies
      run: |
        # ParaView dependencies
        brew install --cask xquartz
        brew install wget llvm libomp ninja python open-mpi
        # TTK dependencies
        brew install boost eigen graphviz numpy embree websocketpp ccache
        python3.10 -m pip install scikit-learn
        # prepend ccache to system path
        echo "$(brew --prefix)/opt/ccache/libexec" >> $GITHUB_PATH
        # remove Python 3.11 installation
        sudo rm -rf /Library/Frameworks/Python.framework/Versions/3.11

    - name: Install optional dependencies
      uses: ./.github/actions/install-deps-unix

    - name: Fetch archived ccache
      continue-on-error: true
      run: |
        wget https://github.com/${{ github.repository }}/releases/download/ccache/ttk-ccache-macOS.tar.gz

    - name: Decompress ccache archive
      continue-on-error: true
      run: |
        tar xzf ttk-ccache-macOS.tar.gz
        rm -rf /Users/runner/work/ttk/.ccache
        mv .ccache /Users/runner/work/ttk/

    - name: Fetch TTK-ParaView headless macOS binary archive
      run: |
        wget https://github.com/${{ env.PV_REPO }}/releases/download/${{ env.PV_TAG }}/ttk-paraview-headless.tar.gz

    - name: Install ParaView
      run: |
        tar xzf ttk-paraview-headless.tar.gz
        sudo cp -r ttk-paraview/* /usr/local

    - name: Set compilers as environment variables
      run: |
        echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
        echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV

    - name: Create & configure TTK build directory
      run: |
        mkdir build
        cd build
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DTTK_BUILD_PARAVIEW_PLUGINS=TRUE \
          -DTTK_BUILD_VTK_WRAPPERS=TRUE \
          -DTTK_BUILD_STANDALONE_APPS=TRUE \
          -DTTK_ENABLE_KAMIKAZE=TRUE \
          -DTTK_ENABLE_MPI=TRUE \
          -DTTK_ENABLE_CPU_OPTIMIZATION=FALSE \
          -DTTK_ENABLE_SHARED_BASE_LIBRARIES=TRUE \
          -DTTK_IMPLICIT_PRECONDITIONS_THRESHOLD=64*64*64 \
          -GNinja \
          $GITHUB_WORKSPACE

    - uses: ammaraskar/gcc-problem-matcher@master
    - name: Build & install TTK
      run: |
        cd build
        cmake --build . --parallel
        sudo cmake --build . --target install

    - name: Set PYTHONPATH for macOS pvpython
      run: |
        # pvpython does not embed the correct PYTHONPATH
        echo "PYTHONPATH=/usr/local/lib/python3.10/site-packages:$PYTHONPATH" >> $GITHUB_ENV

    - name: Run TTK tests
      uses: ./.github/actions/test-ttk-unix

    - uses: actions/checkout@v3
      with:
        repository: "topology-tool-kit/ttk-data"
        ref: "dev"
        path: "ttk-data"
      name: Checkout ttk-data

    - name: Run ttk-data states [NOT ENFORCED]
      if: false
      id: validate
      continue-on-error: true
      run: |
        cd ttk-data/tests
        mkdir output_screenshots
        python3 -u validate.py || (tar zcf screenshots.tar.gz output_screenshots && false)
      env:
        PV_PLUGIN_PATH: /usr/local/bin/plugins/TopologyToolKit

    - name: Upload result screenshots
      if: steps.validate.outcome == 'failure'
      uses: actions/upload-artifact@v3
      with:
        name: screenshots-macOS.tar.gz
        path: ttk-data/tests/screenshots.tar.gz
        retention-days: 10

    - name: Run ttk-data Python scripts
      run: |
        cd ttk-data
        python3.10 -u python/run.py
      env:
        PV_PLUGIN_PATH: /usr/local/bin/plugins/TopologyToolKit

    - name: Test ttk-data Python scripts results [NOT ENFORCED]
      continue-on-error: true
      run: |
        cd ttk-data
        cat python/res.json
        diff python/hashes/macOS.json python/res.json


  # ------------------ #
  # Test Windows build #
  # ------------------ #
  test-build-windows:
    runs-on: windows-2022
    env:
      PV_DIR: C:\Program Files\TTK-ParaView
      TTK_DIR: C:\Program Files (x86)\ttk
      CONDA_ROOT: C:\Miniconda
    steps:
    - uses: actions/checkout@v3
      name: Checkout TTK source code

    - uses: s-weigand/setup-conda@v1

    - name: Install dependencies with conda
      shell: bash
      run: |
        conda install -c conda-forge boost glew eigen spectralib zfp \
          scikit-learn openmp graphviz ninja websocketpp sccache
        # add sccache to PATH
        echo "$CONDA_ROOT/bin" >> $GITHUB_PATH
        # add TTK & ParaView install folders to PATH
        echo "$PV_DIR/bin" >> $GITHUB_PATH
        echo "$TTK_DIR/bin" >> $GITHUB_PATH

    - name: Remove hosted Python
      shell: bash
      run: |
        rm -rf C:/hostedtoolcache/windows/Python

    - name: Fetch archived ccache
      continue-on-error: true
      run: |
        Invoke-WebRequest `
        -OutFile ttk-sccache.tar.gz `
        -Uri https://github.com/${{ github.repository }}/releases/download/ccache/ttk-sccache-windows.tar.gz

    - name: Decompress ccache archive
      continue-on-error: true
      shell: bash
      run: |
        tar xzf ttk-sccache.tar.gz
        mkdir -p /c/Users/runneradmin/AppData/Local/Mozilla/sccache
        mv cache /c/Users/runneradmin/AppData/Local/Mozilla/sccache

    - name: Fetch TTK-ParaView headless Windows installer
      run: |
        Invoke-WebRequest `
        -OutFile ttk-paraview-headless.exe `
        -Uri https://github.com/${{ env.PV_REPO }}/releases/download/${{ env.PV_TAG }}/ttk-paraview-headless.exe

    - name: Install ParaView
      shell: cmd
      run: |
        ttk-paraview-headless.exe /S

    - name: Create & configure TTK build directory
      shell: cmd
      run: |
        set CMAKE_PREFIX_PATH=%CONDA_ROOT%\Library\lib\cmake;%CONDA_ROOT%\Library\share\eigen3\cmake;%CONDA_ROOT%\Library\cmake;%ProgramFiles%\TTK-ParaView\lib\cmake
        set CC=clang-cl.exe
        set CXX=clang-cl.exe
        call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        sccache --stop-server
        sccache --start-server
        mkdir build
        cd build
        cmake ^
          -DCMAKE_BUILD_TYPE=Release ^
          -DCMAKE_POLICY_DEFAULT_CMP0092=NEW ^
          -DBUILD_SHARED_LIBS:BOOL=TRUE ^
          -DCMAKE_C_COMPILER_LAUNCHER=sccache ^
          -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
          -DPython3_ROOT_DIR="%CONDA_ROOT%" ^
          -DGraphviz_INCLUDE_DIR="%CONDA_ROOT%\Library\include\graphviz" ^
          -DGraphviz_CDT_LIBRARY="%CONDA_ROOT%\Library\lib\cdt.lib" ^
          -DGraphviz_GVC_LIBRARY="%CONDA_ROOT%\Library\lib\gvc.lib" ^
          -DGraphviz_CGRAPH_LIBRARY="%CONDA_ROOT%\Library\lib\cgraph.lib" ^
          -DGraphviz_PATHPLAN_LIBRARY="%CONDA_ROOT%\Library\lib\pathplan.lib" ^
          -DTTK_BUILD_PARAVIEW_PLUGINS=TRUE ^
          -DTTK_BUILD_VTK_WRAPPERS=TRUE ^
          -DTTK_BUILD_STANDALONE_APPS=TRUE ^
          -DTTK_ENABLE_KAMIKAZE=TRUE ^
          -DTTK_ENABLE_OPENMP=TRUE ^
          -DTTK_ENABLE_CPU_OPTIMIZATION=FALSE ^
          -DTTK_ENABLE_SHARED_BASE_LIBRARIES=TRUE ^
          -DTTK_IMPLICIT_PRECONDITIONS_THRESHOLD=64*64*64 ^
          -GNinja ^
          ..

    - name: Fix clang-cl OpenMP flags in build.ninja
      shell: bash
      run: |
        sed -i 's/-Xclang -fopenmp/-openmp/' build/build.ninja

    - name: Build & install TTK
      shell: cmd
      run: |
        cd build
        call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        cmake --build . --config Release --parallel --target install

    - name: Test C++ example
      shell: cmd
      run: |
        set CC=clang-cl.exe
        set CXX=clang-cl.exe
        call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        set CMAKE_PREFIX_PATH=%TTK_DIR%\lib\cmake;%PV_DIR%\lib\cmake
        cd %GITHUB_WORKSPACE%\examples\c++
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -GNinja ..
        cmake --build . --config Release --parallel
        ttkExample-c++.exe -i ..\..\data\inputData.off

    - name: Test VTK-C++ example
      shell: cmd
      run: |
        set CC=clang-cl.exe
        set CXX=clang-cl.exe
        call "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        set CMAKE_PREFIX_PATH=%TTK_DIR%\lib\cmake;%PV_DIR%\lib\cmake
        cd %GITHUB_WORKSPACE%\examples\vtk-c++
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -GNinja ..
        cmake --build . --config Release --parallel
        ttkExample-vtk-c++.exe -i ..\..\data\inputData.vtu

    - name: Test Python example
      shell: cmd
      run: |
        set PYTHONPATH=%PV_DIR%\bin\Lib\site-packages;%TTK_DIR%\bin\Lib\site-packages;%CONDA_ROOT%\Lib
        cd %GITHUB_WORKSPACE%\examples\python
        python example.py ..\data\inputData.vtu

    - name: Test pvpython example
      shell: cmd
      run: |
        set PYTHONPATH=%CONDA_ROOT%\Lib
        set PV_PLUGIN_PATH=%TTK_DIR%\bin\plugins
        cd %GITHUB_WORKSPACE%\examples\pvpython
        pvpython.exe example.py ..\data\inputData.vtu

    - name: Test standalone
      shell: cmd
      run: |
        cd %GITHUB_WORKSPACE%\examples\vtk-c++
        ttkHelloWorldCmd.exe -i %GITHUB_WORKSPACE%\examples\data\inputData.vtu

    - uses: actions/checkout@v3
      with:
        repository: "topology-tool-kit/ttk-data"
        ref: "dev"
        path: "ttk-data"
      name: Checkout ttk-data

    - name: Resample large datasets
      shell: python
      working-directory: ./ttk-data
      run: |
        from paraview import simple
        for ds in ["ctBones.vti"]:
            vti = simple.XMLImageDataReader(FileName=ds)
            rsi = simple.ResampleToImage(Input=vti)
            rsi.SamplingDimensions = [128, 128, 128]
            simple.SaveData(ds, rsi)
      env:
        PYTHONPATH: ${{ env.PV_DIR }}\bin\Lib\site-packages

    - name: Run ttk-data Python scripts
      shell: cmd
      run: |
        set PYTHONPATH=%PV_DIR%\bin\Lib\site-packages;%TTK_DIR%\bin\Lib\site-packages;%CONDA_ROOT%\Lib
        set PV_PLUGIN_PATH=%TTK_DIR%\bin\plugins
        cd ttk-data
        python -u python\run.py

    - name: Test ttk-data Python scripts results [NOT ENFORCED]
      continue-on-error: true
      shell: cmd
      run: |
        cd ttk-data
        type python\res.json
        FC python\hashes\windows.json python\res.json
